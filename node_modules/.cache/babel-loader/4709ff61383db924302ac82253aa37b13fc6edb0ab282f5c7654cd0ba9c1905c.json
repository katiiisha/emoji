{"ast":null,"code":"var _jsxFileName = \"/Users/ekaterina/Desktop/avenu/emoji/project/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Filter from './componets/Filter';\nimport Cards from './componets/Cards';\nimport Paginate from './componets/Paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // получаем данные с сервера и записываем их в хук\n  const [data, setData] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  // количество отображемых карточек на странице \n  const [cardsPerPage] = useState(9);\n  //текущая страница\n  const [currentPage, setCurrentPage] = useState(1);\n  console.log(currentPage);\n  // получаем данные с сервера\n  const url = 'https://63f4e22355677ef68bc5fb32.mockapi.io/emoji';\n  useEffect(() => {\n    axios.get(url).then(response => {\n      setData(response.data);\n    });\n  }, []);\n  // поиск эмоджи\n  const filteredEmoji = data.filter(elem => {\n    const fullSearch = searchValue.split(\" \");\n    return fullSearch.every(word => elem.title.toLowerCase().includes(word.toLowerCase()));\n  });\n\n  // определение индекса первой и последней карточки \n  const lastCardIndex = currentPage * cardsPerPage;\n  const firstCardIndex = lastCardIndex - cardsPerPage;\n  // получили первые 12 карточек из полученного с сервера массива \n  const currentCards = Math.ceil(data.length / cardsPerPage);\n  // вырезаем из массива нужное количество карточек\n  const emojiList = filteredEmoji.slice(firstCardIndex, lastCardIndex);\n  let width = document.body.clientWidth;\n  window.onresize = event => {\n    width = document.body.clientWidth;\n    width === 600 ? cardsPerPage = 8 : console.log('loser');\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Filter, {\n      setCurrentPage: setCurrentPage,\n      setSearchValue: setSearchValue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      emojiList: emojiList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paginate, {\n      setCurrentPage: setCurrentPage,\n      currentPage: currentPage,\n      cardsPerPage: cardsPerPage,\n      currentCards: currentCards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"bMX9Z6GmqaQfohN1AgJFpCTqc7g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Filter","Cards","Paginate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","searchValue","setSearchValue","cardsPerPage","currentPage","setCurrentPage","console","log","url","get","then","response","filteredEmoji","filter","elem","fullSearch","split","every","word","title","toLowerCase","includes","lastCardIndex","firstCardIndex","currentCards","Math","ceil","length","emojiList","slice","width","document","body","clientWidth","window","onresize","event","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ekaterina/Desktop/avenu/emoji/project/src/App.js"],"sourcesContent":["\nimport React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Filter from './componets/Filter';\nimport Cards from './componets/Cards';\nimport Paginate from './componets/Paginate';\n\nfunction App() {\n  // получаем данные с сервера и записываем их в хук\n  const [data, setData] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  // количество отображемых карточек на странице \n  const [cardsPerPage] = useState(9);\n  //текущая страница\n  const [currentPage, setCurrentPage] = useState(1);\n  console.log(currentPage);\n// получаем данные с сервера\n  const url = 'https://63f4e22355677ef68bc5fb32.mockapi.io/emoji';\n  useEffect(() => {\n    axios.get(url)\n      .then((response) => {\n        setData(response.data)\n      })\n  }, []);\n// поиск эмоджи\n  const filteredEmoji = data.filter((elem) => {\n    const fullSearch = searchValue.split(\" \");\n    return fullSearch.every(\n      (word) =>\n        elem.title.toLowerCase().includes(word.toLowerCase())\n    );\n  });\n\n  // определение индекса первой и последней карточки \n  const lastCardIndex = currentPage * cardsPerPage;\n  const firstCardIndex = lastCardIndex - cardsPerPage;\n  // получили первые 12 карточек из полученного с сервера массива \n  const currentCards = Math.ceil(data.length / cardsPerPage);\n// вырезаем из массива нужное количество карточек\n  const emojiList = filteredEmoji.slice(\n    firstCardIndex,\n    lastCardIndex\n  );\n  \n  let width = document.body.clientWidth;\n  window.onresize = (event) => {\n    width = document.body.clientWidth\n    width === 600 ? cardsPerPage=8 : console.log('loser');\n  };\n \n  return (\n    <>\n      \n      <Filter setCurrentPage={setCurrentPage} setSearchValue={setSearchValue} />\n    \n      <Cards emojiList={emojiList} />\n      <Paginate setCurrentPage={setCurrentPage} currentPage={currentPage} cardsPerPage={cardsPerPage} currentCards={currentCards} /> \n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD;EACA,MAAM,CAACgB,YAAY,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAClC;EACA,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACjDmB,OAAO,CAACC,GAAG,CAACH,WAAW,CAAC;EAC1B;EACE,MAAMI,GAAG,GAAG,mDAAmD;EAC/DpB,SAAS,CAAC,MAAM;IACdC,KAAK,CAACoB,GAAG,CAACD,GAAG,CAAC,CACXE,IAAI,CAAEC,QAAQ,IAAK;MAClBX,OAAO,CAACW,QAAQ,CAACZ,IAAI,CAAC;IACxB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACR;EACE,MAAMa,aAAa,GAAGb,IAAI,CAACc,MAAM,CAAEC,IAAI,IAAK;IAC1C,MAAMC,UAAU,GAAGd,WAAW,CAACe,KAAK,CAAC,GAAG,CAAC;IACzC,OAAOD,UAAU,CAACE,KAAK,CACpBC,IAAI,IACHJ,IAAI,CAACK,KAAK,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACH,IAAI,CAACE,WAAW,EAAE,CAAC,CACxD;EACH,CAAC,CAAC;;EAEF;EACA,MAAME,aAAa,GAAGlB,WAAW,GAAGD,YAAY;EAChD,MAAMoB,cAAc,GAAGD,aAAa,GAAGnB,YAAY;EACnD;EACA,MAAMqB,YAAY,GAAGC,IAAI,CAACC,IAAI,CAAC3B,IAAI,CAAC4B,MAAM,GAAGxB,YAAY,CAAC;EAC5D;EACE,MAAMyB,SAAS,GAAGhB,aAAa,CAACiB,KAAK,CACnCN,cAAc,EACdD,aAAa,CACd;EAED,IAAIQ,KAAK,GAAGC,QAAQ,CAACC,IAAI,CAACC,WAAW;EACrCC,MAAM,CAACC,QAAQ,GAAIC,KAAK,IAAK;IAC3BN,KAAK,GAAGC,QAAQ,CAACC,IAAI,CAACC,WAAW;IACjCH,KAAK,KAAK,GAAG,GAAG3B,YAAY,GAAC,CAAC,GAAGG,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACvD,CAAC;EAED,oBACEb,OAAA,CAAAE,SAAA;IAAAyC,QAAA,gBAEE3C,OAAA,CAACJ,MAAM;MAACe,cAAc,EAAEA,cAAe;MAACH,cAAc,EAAEA;IAAe;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAE1E/C,OAAA,CAACH,KAAK;MAACqC,SAAS,EAAEA;IAAU;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC/B/C,OAAA,CAACF,QAAQ;MAACa,cAAc,EAAEA,cAAe;MAACD,WAAW,EAAEA,WAAY;MAACD,YAAY,EAAEA,YAAa;MAACqB,YAAY,EAAEA;IAAa;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA,gBAC7H;AAEP;AAAC3C,EAAA,CApDQD,GAAG;AAAA6C,EAAA,GAAH7C,GAAG;AAsDZ,eAAeA,GAAG;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}