{"ast":null,"code":"var _jsxFileName = \"/Users/ekaterina/Desktop/avenu/emoji/project/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Filter from './componets/Filter';\nimport Cards from './componets/Cards';\nimport Paginate from './componets/Paginate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // получаем данные с сервера и записываем их в хук\n  const [data, setData] = useState([]);\n  const url = 'https://63f4e22355677ef68bc5fb32.mockapi.io/emoji';\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(data => setData(data));\n  }, []);\n\n  //данные получаенные с инпута \n  const [text, setText] = useState('');\n  const handleNameChange = e => {\n    setText(e.target.value);\n  };\n  // пагинация \n\n  // определение индекса первой и последней карточки \n  const lastCardIndex = CurrentPage * CardsPerPage;\n  const firstCardIndex = lastCardIndex - CardsPerPage;\n  // получили первые 12 карточек из полученного с сервера массива \n  const currentCards = data.slice(firstCardIndex, lastCardIndex);\n  console.log(currentCards);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Filter, {\n      handleNameChange: handleNameChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      data: data,\n      text: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paginate, {\n      data: data,\n      CurrentPage: CurrentPage,\n      CardsPerPage: CardsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"6NkV9PkmZrgAx+f5xxvC+0K8Snc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","Filter","Cards","Paginate","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","url","fetch","then","res","json","text","setText","handleNameChange","e","target","value","lastCardIndex","CurrentPage","CardsPerPage","firstCardIndex","currentCards","slice","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ekaterina/Desktop/avenu/emoji/project/src/App.js"],"sourcesContent":["\nimport React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport Filter from './componets/Filter';\nimport Cards from './componets/Cards';\nimport Paginate from './componets/Paginate';\n\nfunction App() {\n  // получаем данные с сервера и записываем их в хук\n  const [data, setData] = useState([])\n  const url = 'https://63f4e22355677ef68bc5fb32.mockapi.io/emoji';\n  useEffect(() => {\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => setData(data))\n  }, [])\n  \n  //данные получаенные с инпута \n  const [text, setText] = useState('')\n  const handleNameChange = (e) => {\n    setText(e.target.value)\n  }\n // пагинация \n \n// определение индекса первой и последней карточки \n  const lastCardIndex = CurrentPage * CardsPerPage;\n  const firstCardIndex = lastCardIndex - CardsPerPage; \n  // получили первые 12 карточек из полученного с сервера массива \n  const currentCards = data.slice(firstCardIndex, lastCardIndex)\nconsole.log(currentCards);\n  return (\n    <>\n      \n      <Filter handleNameChange={handleNameChange} />\n    \n      <Cards data={data} text={text}  />\n      <Paginate data={data} CurrentPage={CurrentPage} CardsPerPage={CardsPerPage} /> \n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAElB,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMc,GAAG,GAAG,mDAAmD;EAC/Db,SAAS,CAAC,MAAM;IACdc,KAAK,CAACD,GAAG,CAAC,CACPE,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEJ,IAAI,IAAKC,OAAO,CAACD,IAAI,CAAC,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMqB,gBAAgB,GAAIC,CAAC,IAAK;IAC9BF,OAAO,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACzB,CAAC;EACF;;EAED;EACE,MAAMC,aAAa,GAAGC,WAAW,GAAGC,YAAY;EAChD,MAAMC,cAAc,GAAGH,aAAa,GAAGE,YAAY;EACnD;EACA,MAAME,YAAY,GAAGjB,IAAI,CAACkB,KAAK,CAACF,cAAc,EAAEH,aAAa,CAAC;EAChEM,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;EACvB,oBACEtB,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBAEE1B,OAAA,CAACJ,MAAM;MAACkB,gBAAgB,EAAEA;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAE9C9B,OAAA,CAACH,KAAK;MAACQ,IAAI,EAAEA,IAAK;MAACO,IAAI,EAAEA;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAI,eAClC9B,OAAA,CAACF,QAAQ;MAACO,IAAI,EAAEA,IAAK;MAACc,WAAW,EAAEA,WAAY;MAACC,YAAY,EAAEA;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA,gBAC7E;AAEP;AAAC1B,EAAA,CAhCQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}